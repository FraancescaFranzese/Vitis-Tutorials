# /*
# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
# SPDX-License-Identifier: X11
# */

#Check environment setup

XF_PROJ_ROOT ?= $(shell bash -c 'export MK_PATH=$(MK_PATH); echo $${MK_PATH%/AI_Engine_Development/*}')

# Makefile input options
TARGET := hw_emu
PFM := tutorial
EMU_CMD := ./launch_hw_emu.sh -no-reboot -run-app embedded_exec.sh 

# File names and locations
GRAPH := aie/graph.cpp
GRAPH_O := libadf.a

KERNEL := s2mm.cpp mm2s.cpp polar_clip.cpp
KERNEL_XO := pl_kernels/s2mm.xo pl_kernels/mm2s.xo pl_kernels/polar_clip.xo
CONFIG_FILE := system.cfg

SDKTARGETSYSROOT ?= $(SYSROOT)
PLATFORM ?= ${PLATFORM_REPO_PATHS}/xilinx_vck190_base_202420_1/xilinx_vck190_base_202420_1.xpfm
ROOTFS ?= ${PLATFORM_REPO_PATHS}/sw/versal/xilinx-versal-common-v2024.2/rootfs.ext4
IMAGE ?=  ${PLATFORM_REPO_PATHS}/sw/versal/xilinx-versal-common-v2024.2/Image

# Command-line options
VPP := v++
AIECC := v++ -c --mode aie

AIE_INCLUDE_FLAGS := --include="$(XILINX_VITIS_AIETOOLS)/include" --include="./aie" --include="./data" --include="./aie/kernels" --include="./"
AIE_FLAGS := --platform $(PLATFORM) --target=hw $(AIE_INCLUDE_FLAGS)  --aie.workdir=./Work --freqhz=200000000 

VPP_XO_FLAGS := -c --mode hls --platform $(PLATFORM)
VPP_LINK_FLAGS := -l --platform $(PLATFORM) $(KERNEL_XO) $(GRAPH_O) -t $(TARGET) --save-temps -g --freqhz=200000000:mm2s.ap_clk --config $(CONFIG_FILE) -o $(PFM).xsa
VPP_FLAGS := $(VPP_LINK_FLAGS)
LDCLFLAGS :=

GCC_FLAGS := -Wall -c \
			 -std=c++14 \
			 -Wno-int-to-pointer-cast \
			 --sysroot=${SDKTARGETSYSROOT}

GCC_INCLUDES := -I$(SDKTARGETSYSROOT)/usr/include/xrt \
				-I$(SDKTARGETSYSROOT)/usr/include

GCC_LIB := -lxrt_coreutil --sysroot=${SDKTARGETSYSROOT}

.ONESHELL:
.PHONY: clean all kernels aie xsa host package run_emu

guard-%:
	@#$(or ${$*}, $(error $* is not set. Run: environment-setup-cortexa72-cortexa53-xilinx-linux))

run: run_emu
all: kernels aie xsa host package
sd_card: kernels aie xsa host package

######################################################
# This step compiles the HLS C kernels and creates an SDF Graph
# the %.xo is used as the output and creates from the %.cpp files
# The graph is generated by having the -target=hw-link
kernels: 
	 $(VPP) $(VPP_XO_FLAGS) --freqhz=150000000 --config pl_kernels/mm2s.cfg  
	 $(VPP) $(VPP_XO_FLAGS) --freqhz=150MHz --config pl_kernels/s2mm.cfg 
	 $(VPP) $(VPP_XO_FLAGS) --config pl_kernels/polar_clip.cfg  

aie: $(GRAPH_O)

$(GRAPH_O): $(GRAPH)
	$(AIECC) $(AIE_FLAGS) $(GRAPH)
#####################################################

########################################################
# Once the kernels and graph are generated, you can build
# the new platform. This creates an XSA and the use of
# generetate-platform.sh to build the actual platform
xsa: $(GRAPH_O) $(KERNEL_XO)
	$(VPP) $(VPP_LINK_FLAGS) || (echo "task: [xsa] failed error code: $$?"; exit 1)
########################################################

############################################################################################################################
# For hardware and hardware emulation, compile the PS code and generate the main.elf. This is needed for creating the PDI.
host: guard-SYSROOT guard-CXX
	cd ./sw
	$(XILINX_VITIS)/gnu/aarch64/lin/aarch64-linux/bin/aarch64-linux-gnu-g++ $(GCC_FLAGS) $(GCC_INCLUDES) -o host.o host.cpp
	$(XILINX_VITIS)/gnu/aarch64/lin/aarch64-linux/bin/aarch64-linux-gnu-g++ *.o $(GCC_LIB) -std=c++14 -o host.exe
############################################################################################################################

##################################################################################################
# Depending on the TARGET, it'll either generate the PDI for hw_emu or hw.
package: guard-IMAGE guard-ROOTFS
	cd ./sw
	v++ -p -t ${TARGET} \
		-f ${PLATFORM} \
		--package.rootfs=${ROOTFS} \
		--package.image_format=ext4 \
		--package.boot_mode=sd \
		--package.kernel_image=${IMAGE} \
		--package.defer_aie_run \
		--package.sd_file embedded_exec.sh \
		--package.sd_file host.exe ../tutorial.xsa ../libadf.a
###################################################################################################

###########################################################################
# If the target is for HW_EMU, launch the emulator
# If the target is for HW, you'll have to follow the Confluence page for
# running on a board farm system.
run_emu: all
ifeq (${TARGET},hw_emu)
	cd ./sw
	$(EMU_CMD)
else
	@echo "Hardware build, no emulation executed."
endif

###########################################################################

clean:
	rm -rf _x v++* $(KERNEL_XO) $(GRAPH_O) *.o *.compile_summary* *.xpe xnwOut *.xsa* *.log *.xsa Work *.db *.csv *$(PFM)* *.jou .Xil
	rm -rf sw/*.o sw/*.elf sw/*.xpe sw/xnwOut sw/Work sw/*.csv sw/*.db sw/*.bin sw/*.BIN sw/*.bif sw/launch_hw_emulator.sh sw/*.txt sw/emulation sw/.Xil
