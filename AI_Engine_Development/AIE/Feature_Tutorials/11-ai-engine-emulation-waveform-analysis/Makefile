# /*
# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
# SPDX-License-Identifier: X11
# */

XF_PROJ_ROOT ?= $(shell bash -c 'export MK_PATH=$(MK_PATH); echo $${MK_PATH%/AI_Engine_Development/*}')

ROOTFS = ${PLATFORM_REPO_PATHS}/sw/versal/xilinx-versal-common-v2024.2/rootfs.ext4
IMAGE = ${PLATFORM_REPO_PATHS}/sw/versal/xilinx-versal-common-v2024.2/Image
SDKTARGETSYSROOT ?= ${SYSROOT}
BASE_PLATFORM ?= ${PLATFORM_REPO_PATHS}/xilinx_vck190_base_202420_1/xilinx_vck190_base_202420_1.xpfm


# Makefile input options
TARGET := hw_emu
PFM := tutorial
EMU_CMD := ./launch_hw_emu.sh -g -aie-sim-options ../aiesimulator_output/aiesim_options.txt

# File names and locations
GRAPH := aie/graph.cpp
GRAPH_O := libadf.a

KERNEL := s2mm.cpp random_noise.cpp
CONFIG_FILE := system.cfg
KERNEL_XO := pl_kernels/s2mm.xo pl_kernels/random_noise.xo

# Command-line options
VPP := v++
AIECC := v++ -c --mode aie

AIE_INCLUDE_FLAGS := --include="$(XILINX_VITIS)/aietools/include" --include="./aie" --include="./data" --include="./aie/kernels" --include="./"
AIE_FLAGS := --target=hw $(AIE_INCLUDE_FLAGS) --platform $(BASE_PLATFORM) --aie.xlopt=0 --aie.pl-freq=100 --aie.workdir=./Work 

VPP_XO_FLAGS := -c --mode hls --platform $(BASE_PLATFORM)
VPP_LINK_FLAGS := -l --platform $(BASE_PLATFORM) $(KERNEL_XO) $(GRAPH_O) -t $(TARGET) --save-temps -g --config $(CONFIG_FILE) -o $(PFM).xsa
VPP_FLAGS := $(VPP_LINK_FLAGS)
LDCLFLAGS :=

GCC_FLAGS := -Wall -c \
			 -std=c++17 \
			 -Wno-int-to-pointer-cast \
			 --sysroot=$(SDKTARGETSYSROOT) 

GCC_INCLUDES := -I$(SDKTARGETSYSROOT)/usr/include/xrt \
				
GCC_LIB := -lxrt_coreutil \
		 -L$(SDKTARGETSYSROOT)/usr/lib \
		--sysroot=${SDKTARGETSYSROOT} 
		  
.ONESHELL:
.PHONY: clean all kernels aie xsa host package run_emu

###
# Guarding Checks. Do not modify.
###
check_defined = \
	$(strip $(foreach 1,$1, \
		$(call __check_defined,$1,$(strip $(value 2)))))

__check_defined = \
	$(if $(value $1),, \
		$(error Undefined $1$(if $2, ($2))))

guard-PLATFORM_REPO_PATHS:
	$(call check_defined, PLATFORM_REPO_PATHS, Set your where you downloaded xilinx_vck190_es1_base_202120_1)

guard-ROOTFS:
	$(call check_defined, ROOTFS, Set to: xilinx-versal-common-v2024.2/rootfs.ext4)

guard-IMAGE:
	$(call check_defined, IMAGE, Set to: xilinx-versal-common-v2024.2/Image)

guard-CXX:
	$(call check_defined, CXX, Run: xilinx-versal-common-v2024.2/environment-setup-aarch64-xilinx-linux)

guard-SDKTARGETSYSROOT:
	$(call check_defined, SDKTARGETSYSROOT, Run: xilinx-versal-common-v2024.2/environment-setup-aarch64-xilinx-linux)

###

all: kernels aie xsa host package
run: all
sd_card: all 

######################################################
# This step compiles the HLS C kernels and creates an ADF Graph
# the %.xo is used as the output and creates from the %.cpp files
# The graph is generated by having the -target=hw
kernels: guard-PLATFORM_REPO_PATHS
	$(VPP) $(VPP_XO_FLAGS) --config pl_kernels/s2mm.cfg
	$(VPP) $(VPP_XO_FLAGS) --config pl_kernels/random_noise.cfg
	@echo "COMPLETE: Kernels Created."	
	
aie: $(GRAPH_O)

aiesim: $(GRAPH_O)
	aiesimulator --profile --dump-vcd=tutorial --pkg-dir=./Work 

$(GRAPH_O): $(GRAPH)
	$(AIECC) $(AIE_FLAGS) $(GRAPH)
	@echo "COMPLETE: libadf.a created."
#####################################################

########################################################
# Once the kernels and graph are generated, you can build
# the hardware part of the design. This creates an xsa
# that will be used to run the design on the platform.
xsa: guard-PLATFORM_REPO_PATHS $(GRAPH_O) $(KERNEL_XO)
	$(VPP) $(VPP_LINK_FLAGS) || (echo "task: [xsa] failed error code: $$?"; exit 1)
	@echo "COMPLETE: .xsa created."
########################################################

############################################################################################################################
# For hardware and hardware emulation, compile the PS code and generate the host.exe. This is needed for creating the sd_card.
host: guard-CXX guard-SDKTARGETSYSROOT 
	cd ./sw 
	$(CXX) $(GCC_FLAGS) $(GCC_INCLUDES) -o main.o host.cpp
	$(CXX) *.o $(GCC_LIB) -std=c++17 -o host.exe 
	@echo "COMPLETE: Host application created."
############################################################################################################################

##################################################################################################
# Depending on the TARGET, it'll either generate the PDI for hw_emu or hw.
package: guard-PLATFORM_REPO_PATHS guard-ROOTFS guard-IMAGE
	cd ./sw
	v++ -p -t ${TARGET} \
		-f ${BASE_PLATFORM} \
		--package.rootfs=${ROOTFS} \
		--package.image_format=ext4 \
		--package.boot_mode=sd \
		--package.kernel_image=${IMAGE} \
		--package.defer_aie_run \
		--package.sd_dir ../data \
		--package.sd_file embedded_exec.sh \
		--package.sd_file host.exe \
		../tutorial.xsa ../libadf.a
	@echo "COMPLETE: hw_emu package created."

###################################################################################################

###########################################################################
# If the target is for HW_EMU, launch the emulator
# If the target is for HW, you'll have to load it onto an sd_card for the device
run_emu: 
ifeq (${TARGET},hw_emu)
	cd ./sw
	$(EMU_CMD)
else
	@echo "Hardware build, no emulation executed."
endif

###########################################################################

clean:
	rm -rf _x v++* $(KERNEL_XO) $(GRAPH_O) *.o *.compile_summary* *.xpe xnwOut *.xsa* *.log *.xsa Work *.db *.csv *$(PFM)* *.jou .Xil
	rm -rf sw/*.log sw/*.xclbin sw/cfg/ sw/launch_hw_emu.sh sw/qemu_dts_files sw/emu_qemu_scripts sw/*.exe sw/_x/ sw/*summary sw/*.o sw/*.elf sw/*.xpe sw/xnwOut sw/Work sw/*.csv sw/*.db sw/*.bin sw/*.BIN sw/*.bif sw/launch_hw_emulator.sh sw/*.txt sw/emulation sw/.Xil
	rm -rf sw/sd_card sw/sd_card.img
