#
# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
# SPDX-License-Identifier: MIT
#




# Makefile input options
TARGET ?= hw_emu
PFM_NAME ?= xilinx_vck190_base_202420_1

#Directories
FILES_DIR ?= ../../Files
DATA_DIR := $(FILES_DIR)/data
PLATFORM_DIR := ${PLATFORM_REPO_PATHS}
AIE:= $(FILES_DIR)/AIE
PL:=$(FILES_DIR)/PL
HwLink:=$(FILES_DIR)/HwLink

# Platform
BASE_PLATFORM := ${PLATFORM_DIR}/$(PFM_NAME)/$(PFM_NAME).xpfm
PFM := Phase1_container

XCLBIN := $(PFM).xclbin
XSA    := $(PFM).xsa


# File names and locations
GRAPH := ${AIE}/src/graph.cpp

GRAPH_O := libadf.a

KERNEL := s2mm.cpp mm2s.cpp polar_clip.cpp
KERNEL_XO := s2mm.xo mm2s.xo polar_clip.xo
CONFIG_FILE := system.cfg


# Command-line options

AIE_INCLUDE_FLAGS := --include "$(XILINX_VITIS)/aietools/include" --include "${AIE}/src" --include "${AIE}/data" --include "${AIE}/src/aie_kernels"
AIE_FLAGS := --target hw $(AIE_INCLUDE_FLAGS) --aie.pl-freq 200
AIE_FLAGS += --platform $(BASE_PLATFORM)
AIE_FLAGS +=  --aie.Xpreproc=-DDATA_DIR=$(DATA_DIR)

VPP_XO_FLAGS := -c --platform $(BASE_PLATFORM) --save-temps -g
VPP_LINK_FLAGS := -l --platform $(BASE_PLATFORM) $(KERNEL_XO) $(GRAPH_O) -t $(TARGET) --save-temps -g --config $(HwLink)/$(CONFIG_FILE) -o $(XSA)


.ONESHELL:
.PHONY: clean all kernels aie  link

phase1: clean  kernels aie link

###
# Guarding Checks. Do not modify.
###
check_defined = \
	$(strip $(foreach 1,$1, \
		$(call __check_defined,$1,$(strip $(value 2)))))

__check_defined = \
	$(if $(value $1),, \
		$(error Undefined $1$(if $2, ($2))))

guard-PLATFORM_REPO_PATHS:
	$(call check_defined, PLATFORM_REPO_PATHS, Set your where you downloaded xilinx_vck190_base_202420_1)

guard-ROOTFS:
	$(call check_defined, ROOTFS, Set to: xilinx-versal-common-v2024.2/rootfs.ext4)

guard-IMAGE:
	$(call check_defined, IMAGE, Set to: xilinx-versal-common-v2024.2/Image)

guard-CXX:
	$(call check_defined, CXX, Run: xilinx-versal-common-v2024.2/environment-setup-aarch64-xilinx-linux)

guard-SDKTARGETSYSROOT:
	$(call check_defined, SDKTARGETSYSROOT, Run: xilinx-versal-common-v2024.2/environment-setup-aarch64-xilinx-linux)


########################################################
# This step compiles the AI Engine graph
# to create the file libadf.a

aie: $(GRAPH_O)

aiesim: $(GRAPH_O)
	aiesimulator --pkg-dir=./Work
	make check_aiesim

check_aiesim:
	../check_op 1 $(DATA_DIR)/s2mm_ref.txt aiesimulator_output/data/DataOut1.txt

$(GRAPH_O): $(GRAPH)
	v++ --compile --mode aie $(AIE_FLAGS) --aie.workdir ./Work $(GRAPH)
	@echo "COMPLETE: libadf.a created."


########################################################



######################################################
# This step compiles the HLS C kernels and creates an ADF Graph
# the %.xo is used as the output and creates from the %.cpp files
# The graph is generated by having the -target=hw
kernels: $(KERNEL_XO)
	@echo "COMPLETE: Kernels Created."


%.xo: ${PL}/src/%.cpp
	mkdir -p plkernels
	sed "s/syn.top=/syn.top=$(basename $@)/g" $(PL)/BaseConfig.cfg > plkernels/HLSConfig_$(basename $@).cfg 
	sed -i "s/syn.file=/syn.file=..\/..\/..\/Files\/PL\/src\/$(basename $@).cpp/g" plkernels/HLSConfig_$(basename $@).cfg
	v++ --compile --mode hls --platform $(BASE_PLATFORM) --config plkernels/HLSConfig_$(basename  $@).cfg --work_dir plkernels/$(basename $@)
	cp plkernels/$(basename $@)/$(basename $@).xo .

########################################################


########################################################
# Once the kernels and graph are generated, you can build
# the hardware part of the design. This creates an xclbin
# that will be used to run the design on the platform.
link: $(GRAPH_O) $(KERNEL_XO)
	v++ $(VPP_LINK_FLAGS) || (echo "task: [link] failed error code: $$?"; exit 1)
	@echo "COMPLETE: .xsa created."
########################################################




clean:
	rm -rf _x v++* $(KERNEL_XO) $(GRAPH_O) $(GRAPH2_O) *.o *.compile_summary* *.xpe xnwOut *.xclbin* *.log *.xsa
	rm -rf Work Work2 *.db *.csv *$(PFM)* *.jou .Xil .AIE_SIM_CMD_LINE_OPTIONS
	rm -rf aiesimulator_output pl_sample*
	rm -rf *.bin *.BIN cfg emu_qemu_scripts launch* *.txt *.sh
	rm -rf sd_card aiesim *.wcfg *.wdb *.bif *.exe *.img  sim temp
	rm -rf aie_primitive.json  drivers  vpl_gen_fixed_presynth.pdi
	rm -rf .crashReporter extracted plkernels
